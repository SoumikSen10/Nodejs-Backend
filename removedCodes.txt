Removed it from src/index.js since this is not a professional way of connecting to DB.

/*
import express from "express";
const app = express();

 async () => {
  try {
    await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`);
    app.on("error", (error) => {
      console.log("ERROR: ", error);
      throw error;
    });

    app.listen(process.env.PORT, () => {
      console.log(`App is listening on port ${process.env.PORT}`);
    });
  } catch (error) {
    console.log("ERROR: ", error);
    throw err;
  }
}; */

/*
^
|
|
Immediately Invoked Function Expression". This pattern is often used in JavaScript to create a self-executing anonymous function. */




Removed it from utils/asyncHandler.js file since I preferred writing with promises instead of async await more.

//Using async await
/* const asyncHandler = (fn) => async (req, res, next) => {
  try {
    await fn(req, res, next);
  } catch (error) {
    res.status(error.code || 500).json({
      success: false,
      message: error.message,
    });
  }
};
 */
/*Explanation
const asyncHandler=()=>{}
const asyncHandler=(func)=>()=>{}
const asyncHandler=(func)=>async()=>{} */
